package omni_test

import (
	"reflect"
	"strings"
	"testing"

	"github.com/dracory/omni"
)

// Helper functions for testing
func assertNotNil(t *testing.T, name string, value interface{}) {
	t.Helper()
	if value == nil || (reflect.ValueOf(value).Kind() == reflect.Ptr && reflect.ValueOf(value).IsNil()) {
		t.Errorf("Expected %s to not be nil", name)
	}
}

func assertEqual(t *testing.T, name string, expected, actual interface{}) {
	t.Helper()
	if !reflect.DeepEqual(expected, actual) {
		t.Errorf("Expected %s to be %v, got %v", name, expected, actual)
	}
}

func assertError(t *testing.T, err error, containsText string) {
	t.Helper()
	if err == nil {
		t.Error("Expected error, got nil")
	} else if containsText != "" && !strings.Contains(err.Error(), containsText) {
		t.Errorf("Expected error to contain '%s', got: %v", containsText, err)
	}
}

func assertNoError(t *testing.T, err error) {
	t.Helper()
	if err != nil {
		t.Fatalf("Unexpected error: %v", err)
	}
}

func TestNewAtom_WithTypeAndAutoGeneratedID(t *testing.T) {
	atom := omni.NewAtom("testType")
	if atom == nil {
		t.Fatal("Expected atom to be created, got nil")
	}
	if got := atom.GetType(); got != "testType" {
		t.Errorf("Expected type 'testType', got '%s'", got)
	}
	if got := atom.GetID(); got == "" {
		t.Error("Expected non-empty ID, got empty string")
	}
}

func TestNewAtom_WithCustomID(t *testing.T) {
	atom := omni.NewAtom("testType", omni.WithID("custom-id"))
	if atom == nil {
		t.Fatal("Expected atom to be created, got nil")
	}
	if got := atom.GetID(); got != "custom-id" {
		t.Errorf("Expected ID 'custom-id', got '%s'", got)
	}
}

func TestNewAtom_WithProperties(t *testing.T) {
	atom := omni.NewAtom("testType",
		omni.WithProperties(map[string]string{
			"key1": "value1",
			"key2": "value2",
		}),
	)
	assertNotNil(t, "atom", atom)

	// Get properties and verify values
	prop1Val := atom.Get("key1")
	assertNotNil(t, "property key1", prop1Val)
	assertEqual(t, "property key1 value", "value1", prop1Val)

	prop2Val := atom.Get("key2")
	assertNotNil(t, "property key2", prop2Val)
	assertEqual(t, "property key2 value", "value2", prop2Val)
}

func TestNewAtom_WithChildren(t *testing.T) {
	child1 := omni.NewAtom("child1")
	child2 := omni.NewAtom("child2")

	atom := omni.NewAtom("parent",
		omni.WithChildren(child1, child2),
	)
	assertNotNil(t, "atom", atom)
	children := atom.ChildrenGet()
	if len(children) != 2 {
		t.Fatalf("Expected 2 children, got %d", len(children))
	}
	assertEqual(t, "first child type", "child1", children[0].GetType())
	assertEqual(t, "second child type", "child2", children[1].GetType())
}

func TestNewAtomFromMap_WithPropertiesAndChildren(t *testing.T) {
	atomMap := map[string]any{
		"id":   "test-id",
		"type": "testType",
		"properties": map[string]any{
			"key1": "value1",
			"key2": "value2",
		},
		"children": []any{
			map[string]any{
				"id":   "child1",
				"type": "childType",
			},
		},
	}

	atom, err := omni.NewAtomFromMap(atomMap)
	assertNoError(t, err)
	assertNotNil(t, "atom", atom)

	assertEqual(t, "atom ID", "test-id", atom.GetID())
	assertEqual(t, "atom type", "testType", atom.GetType())

	prop1 := atom.Get("key1")
	assertNotNil(t, "property key1", prop1)
	assertEqual(t, "property key1 value", "value1", prop1)

	prop2 := atom.Get("key2")
	assertNotNil(t, "property key2", prop2)
	assertEqual(t, "property key2 value", "value2", prop2)

	children := atom.ChildrenGet()
	if len(children) != 1 {
		t.Fatalf("Expected 1 child, got %d", len(children))
	}
	assertEqual(t, "child ID", "child1", children[0].GetID())
	assertEqual(t, "child type", "childType", children[0].GetType())
}

func TestNewAtomFromMap_WithNilMap(t *testing.T) {
	atom, err := omni.NewAtomFromMap(nil)
	assertError(t, err, "cannot be nil")
	if atom != nil {
		t.Error("Expected atom to be nil on error")
	}
}

func TestNewAtomFromMap_WithMissingID(t *testing.T) {
	atom, err := omni.NewAtomFromMap(map[string]any{
		"type": "testType",
	})
	assertError(t, err, "'id' field")
	if atom != nil {
		t.Error("Expected atom to be nil on error")
	}
}

func TestNewAtomFromMap_WithMissingType(t *testing.T) {
	atom, err := omni.NewAtomFromMap(map[string]any{
		"id": "test-id",
	})
	assertError(t, err, "'type' field")
	if atom != nil {
		t.Error("Expected atom to be nil on error")
	}
}

func TestNewAtomFromJSON_WithValidJSON(t *testing.T) {
	jsonStr := `{
		"id": "test-id",
		"type": "testType",
		"properties": {
			"key1": "value1"
		},
		"children": [
			{
				"id": "child1",
				"type": "childType"
			}
		]
	}`

	atom, err := omni.NewAtomFromJSON(jsonStr)
	assertNoError(t, err)
	assertNotNil(t, "atom", atom)

	assertEqual(t, "atom ID", "test-id", atom.GetID())
	assertEqual(t, "atom type", "testType", atom.GetType())

	prop1 := atom.Get("key1")
	assertNotNil(t, "property key1", prop1)
	assertEqual(t, "property key1 value", "value1", prop1)

	children := atom.ChildrenGet()
	if len(children) != 1 {
		t.Fatalf("Expected 1 child, got %d", len(children))
	}
	assertEqual(t, "child ID", "child1", children[0].GetID())
}

func TestNewAtomFromJSON_WithEmptyJSON(t *testing.T) {
	atom, err := omni.NewAtomFromJSON("")
	assertError(t, err, "empty JSON string")
	if atom != nil {
		t.Error("Expected atom to be nil on error")
	}
}

func TestNewAtomFromJSON_WithInvalidJSON(t *testing.T) {
	atom, err := omni.NewAtomFromJSON("{invalid-json}")
	if err == nil {
		t.Error("Expected error for invalid JSON, got nil")
	}
	if atom != nil {
		t.Error("Expected atom to be nil on error")
	}
}

func TestNewAtomFromGob_WithValidData(t *testing.T) {
	// Create a parent atom with properties and a child
	child := omni.NewAtom("testChild",
		omni.WithProperties(
			map[string]string{
				"name":  "Test Child",
				"value": "42",
			},
		),
	)

	parent := omni.NewAtom("testParent",
		omni.WithProperties(
			map[string]string{
				"name":   "Test Parent",
				"active": "true",
			},
		),
		omni.WithChildren(child),
	)

	// Serialize to gob
	data, err := parent.ToGob()
	if err != nil {
		t.Fatalf("Failed to serialize atom to gob: %v", err)
	}
	if len(data) == 0 {
		t.Fatal("Expected non-empty gob data")
	}

	// Deserialize back
	deserialized, err := omni.NewAtomFromGob(data)
	if err != nil {
		t.Fatalf("Failed to deserialize atom from gob: %v", err)
	}
	if deserialized == nil {
		t.Fatal("Expected deserialized atom to be created, got nil")
	}

	// Verify the deserialized atom matches the original
	if deserialized.GetID() != parent.GetID() {
		t.Errorf("Expected atom ID '%s', got '%s'", parent.GetID(), deserialized.GetID())
	}
	if deserialized.GetType() != parent.GetType() {
		t.Errorf("Expected atom type '%s', got '%s'", parent.GetType(), deserialized.GetType())
	}

	// Verify properties
	nameProp := deserialized.Get("name")
	if nameProp == "" {
		t.Fatal("Expected name property to be created, got nil")
	}
	if nameProp != "Test Parent" {
		t.Errorf("Expected name property value 'Test Parent', got '%s'", nameProp)
	}

	activeProp := deserialized.Get("active")
	if activeProp == "" {
		t.Fatal("Expected active property to be created, got nil")
	}
	if activeProp != "true" {
		t.Errorf("Expected active property value 'true', got '%s'", activeProp)
	}

	// Verify children
	children := deserialized.ChildrenGet()
	if len(children) != 1 {
		t.Fatalf("Expected 1 child, got %d", len(children))
	}
	if children[0].GetID() != child.GetID() {
		t.Errorf("Expected child ID '%s', got '%s'", child.GetID(), children[0].GetID())
	}
	if children[0].GetType() != child.GetType() {
		t.Errorf("Expected child type '%s', got '%s'", child.GetType(), children[0].GetType())
	}

	childNameProp := children[0].Get("name")
	if childNameProp == "" {
		t.Fatal("Expected child name property to be created, got nil")
	}
	if childNameProp != "Test Child" {
		t.Errorf("Expected child name property value 'Test Child', got '%s'", childNameProp)
	}

	childValueProp := children[0].Get("value")
	if childValueProp == "" {
		t.Fatal("Expected child value property to be created, got nil")
	}
	if childValueProp != "42" {
		t.Errorf("Expected child value property value '42', got '%s'", childValueProp)
	}
}

func TestNewAtomFromGob_WithEmptyData(t *testing.T) {
	atom, err := omni.NewAtomFromGob([]byte{})
	if err == nil {
		t.Fatal("Expected error for empty data, got nil")
	}
	if atom != nil {
		t.Fatal("Expected atom to be nil on error")
	}
}

func TestNewAtomFromGob_WithInvalidData(t *testing.T) {
	atom, err := omni.NewAtomFromGob([]byte("invalid-gob-data"))
	if err == nil {
		t.Error("Expected error for invalid gob data, got nil")
	}
	if atom != nil {
		t.Error("Expected atom to be nil on error")
	}
}
